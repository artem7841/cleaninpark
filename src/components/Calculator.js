import React, { useState, useEffect } from "react";

const Calculator = () => {
  const [area, setArea] = useState("");
  const [service, setService] = useState("");
  const [priceRange, setPriceRange] = useState({ min: null, max: null });
  const [name, setName] = useState("");
  const [phone, setPhone] = useState("");
  const [errors, setErrors] = useState({});
  const [isCalculated, setIsCalculated] = useState(false);

  // –¶–µ–Ω—ã –∑–∞ –º¬≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏
  const priceRates = {
    general: { min: 160, max: 180 },
    support: { min: 110, max: 130 },
    repair: { min: 180, max: 200 },
    office: { min: 30, max: 120 }
  };

  // –ù–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const serviceNames = {
    general: "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞",
    support: "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —É–±–æ—Ä–∫–∞", 
    repair: "–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞",
    office: "–£–±–æ—Ä–∫–∞ –æ—Ñ–∏—Å–æ–≤"
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const savedData = sessionStorage.getItem('calculatorFormData');
    if (savedData) {
      try {
        const formData = JSON.parse(savedData);
        setName(formData.name || "");
        setPhone(formData.phone || "");
        setService(formData.service || "");
        setArea(formData.area || "");
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã:', error);
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    const formData = {
      name,
      phone,
      service,
      area
    };
    sessionStorage.setItem('calculatorFormData', JSON.stringify(formData));
  }, [name, phone, service, area]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
  const validateName = (name) => {
    if (!name.trim()) {
      return "–í–≤–µ–¥–∏—Ç–µ –∏–º—è";
    }
    if (name.trim().length < 2) {
      return "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞";
    }
    if (!/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$/.test(name.trim())) {
      return "–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å—ã";
    }
    return "";
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const validatePhone = (phone) => {
    if (!phone.trim()) {
      return "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω";
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –≤—Å–µ–≥–æ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    const cleanPhone = phone.replace(/[^\d]/g, '');
    
    if (cleanPhone.length < 10) {
      return "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä";
    }
    if (cleanPhone.length > 15) {
      return "–¢–µ–ª–µ—Ñ–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π";
    }
    if (!/^[\d\s\-\+\(\)]+$/.test(phone)) {
      return "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞";
    }
    return "";
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ª—É–≥–∏
  const validateService = (service) => {
    if (!service) {
      return "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏";
    }
    return "";
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–æ—â–∞–¥–∏
  const validateArea = (area) => {
    if (!area.trim()) {
      return "–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å";
    }
    
    const areaNum = parseInt(area);
    
    if (isNaN(areaNum)) {
      return "–ü–ª–æ—â–∞–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º";
    }
    if (areaNum < 10) {
      return "–ü–ª–æ—â–∞–¥—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 –º¬≤";
    }
    if (areaNum > 1000) {
      return "–ü–ª–æ—â–∞–¥—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 –º¬≤";
    }
    return "";
  };

  const validateForm = () => {
    const newErrors = {
      name: validateName(name),
      phone: validatePhone(phone),
      service: validateService(service),
      area: validateArea(area)
    };

    setErrors(newErrors);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏
    const hasErrors = Object.values(newErrors).some(error => error !== "");
    return !hasErrors;
  };

  const handleCalculate = () => {
    if (!validateForm()) {
      setIsCalculated(false);
      return;
    }

    const areaNum = parseInt(area);
    const rates = priceRates[service];
    
    if (rates) {
      const minPrice = areaNum * rates.min;
      const maxPrice = areaNum * rates.max;
      setPriceRange({ min: minPrice, max: maxPrice });
      setIsCalculated(true);
    }
  };

  const handlePhoneChange = (e) => {
    const value = e.target.value;
    setPhone(value);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    if (errors.phone) {
      const error = validatePhone(value);
      setErrors(prev => ({ ...prev, phone: error }));
    }
  };

  const handleAreaChange = (e) => {
    const value = e.target.value.replace(/[^\d]/g, '');
    setArea(value);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    if (errors.area) {
      const error = validateArea(value);
      setErrors(prev => ({ ...prev, area: error }));
    }
  };

  const handleNameChange = (e) => {
    const value = e.target.value;
    setName(value);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    if (errors.name) {
      const error = validateName(value);
      setErrors(prev => ({ ...prev, name: error }));
    }
  };

  const handleServiceChange = (e) => {
    const value = e.target.value;
    setService(value);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    if (errors.service) {
      const error = validateService(value);
      setErrors(prev => ({ ...prev, service: error }));
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö
  const scrollToContactsWithData = (e) => {
    e.preventDefault();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—á–µ—Ç –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω
    if (!isCalculated) {
      alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏");
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ sessionStorage –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    const formData = {
      name: name.trim(),
      phone: phone.trim(),
      service: serviceNames[service] || service,
      meters: area,
      calculatedPrice: priceRange
    };
    
    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', formData);
    
    try {
      sessionStorage.setItem('calculatorData', JSON.stringify(formData));
      console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ sessionStorage');
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      clearCalculatorForm();
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ sessionStorage:', error);
    }
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
    const contactsSection = document.getElementById('contact');
    if (contactsSection) {
      contactsSection.scrollIntoView({ behavior: 'smooth' });
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
  const clearCalculatorForm = () => {
    setName("");
    setPhone("");
    setService("");
    setArea("");
    setPriceRange({ min: null, max: null });
    setIsCalculated(false);
    setErrors({});
    sessionStorage.removeItem('calculatorFormData');
  };

  // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º —Å URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  const navigateToContacts = () => {
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    if (!validateForm()) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ sessionStorage (–∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
    const dataToSave = {
      service: serviceNames[service] || service,
      meters: area,
      calculatedPrice: priceRange,
      name: name,
      phone: phone
    };
    sessionStorage.setItem('calculatorData', JSON.stringify(dataToSave));

    // –°–æ–∑–¥–∞–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const params = new URLSearchParams({
      service: serviceNames[service] || service,
      meters: area || '',
      priceMin: priceRange?.min || 0,
      priceMax: priceRange?.max || 0,
      name: name || '',
      phone: phone || ''
    });

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    window.location.href = `/#contact?${params.toString()}`;
    console.log('üîó –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', params.toString());
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
  const formatPrice = (price) => {
    return price.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
  };

  return (
    <section className="calculator" id="calculator">
      <h2>–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π —É–±–æ—Ä–∫–∏</h2>
      <div className="calc-form">
        {/* –ò–º—è */}
        <div className="form-group">
          <input 
            type="text" 
            placeholder="–ò–º—è" 
            value={name}
            onChange={handleNameChange}
            className={errors.name ? "error" : ""}
            onBlur={() => setErrors(prev => ({ ...prev, name: validateName(name) }))}
          />
          {errors.name && <span className="error-message">{errors.name}</span>}
        </div>

        {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
        <div className="form-group">
          <input 
            type="text" 
            placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" 
            value={phone}
            onChange={handlePhoneChange}
            className={errors.phone ? "error" : ""}
            onBlur={() => setErrors(prev => ({ ...prev, phone: validatePhone(phone) }))}
          />
          {errors.phone && <span className="error-message">{errors.phone}</span>}
        </div>

        {/* –¢–∏–ø —É—Å–ª—É–≥–∏ */}
        <div className="form-group">
          <select 
            value={service} 
            onChange={handleServiceChange}
            className={errors.service ? "error" : ""}
            onBlur={() => setErrors(prev => ({ ...prev, service: validateService(service) }))}
          >
            <option value="" disabled>–¢–∏–ø —É—Å–ª—É–≥–∏</option>
            <option value="general">–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞</option>
            <option value="repair">–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞</option>
            <option value="support">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è</option>
            <option value="office">–î–ª—è –æ—Ñ–∏—Å–æ–≤</option>
          </select>
          {errors.service && <span className="error-message">{errors.service}</span>}
        </div>

        {/* –ü–ª–æ—â–∞–¥—å */}
        <div className="form-group">
          <input
            type="text"
            value={area}
            onChange={handleAreaChange}
            placeholder="–ü–ª–æ—â–∞–¥—å (–º¬≤)"
            className={errors.area ? "error" : ""}
            onBlur={() => setErrors(prev => ({ ...prev, area: validateArea(area) }))}
          />
          {errors.area && <span className="error-message">{errors.area}</span>}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ */}
        <button 
          onClick={handleCalculate} 
          className="btn2"
          disabled={!name || !phone || !service || !area}
        >
          –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á–µ—Ç
        </button>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤–∏–ª–∫–æ–π —Ü–µ–Ω */}
      {priceRange.min && priceRange.max && isCalculated && (
        <div className="price-result">
          <p>
            <b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–±–æ—Ä–∫–∏:</b>
          </p>
          <p className="price-range">
            –æ—Ç {formatPrice(priceRange.min)} –¥–æ {formatPrice(priceRange.max)} ‚ÇΩ
          </p>
          <p className="price-note">
            –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
          </p>
          {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö */}
          <div style={{marginTop: '15px', textAlign: 'center'}}>
            <a 
              href="#contact" 
              onClick={navigateToContacts}
              style={{
                color: '#007bff',
                textDecoration: 'underline',
                fontSize: '16px',
                cursor: 'pointer'
              }}
            >
              –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
            </a>
          </div>
        </div>
      )}
    </section>
  );
};

export default Calculator;