import React, { useState, useEffect, useRef } from "react";

const Contacts = () => {
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    contactMethod: ""
  });

  const [errors, setErrors] = useState({
    name: "",
    phone: "",
    contactMethod: ""
  });

  const [touched, setTouched] = useState({
    name: false,
    phone: false,
    contactMethod: false
  });

  const [calculatorData, setCalculatorData] = useState(null);
  const hasLoadedCalculatorData = useRef(false);
  const formRef = useRef(null);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
  const validateName = (name) => {
    if (!name.trim()) {
      return "–í–≤–µ–¥–∏—Ç–µ –∏–º—è";
    }
    if (name.trim().length < 2) {
      return "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞";
    }
    if (!/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$/.test(name.trim())) {
      return "–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å—ã";
    }
    return "";
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const validatePhone = (phone) => {
    if (!phone.trim()) {
      return "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω";
    }
    
    const cleanPhone = phone.replace(/[^\d]/g, '');
    
    if (cleanPhone.length < 10) {
      return "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä";
    }
    if (cleanPhone.length > 15) {
      return "–¢–µ–ª–µ—Ñ–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π";
    }
    if (!/^[\d\s\-\+\(\)]+$/.test(phone)) {
      return "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞";
    }
    return "";
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
  const validateContactMethod = (method) => {
    if (!method) {
      return "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏";
    }
    return "";
  };

  // –û–±—â–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    const newErrors = {
      name: validateName(formData.name),
      phone: validatePhone(formData.phone),
      contactMethod: validateContactMethod(formData.contactMethod)
    };

    setErrors(newErrors);
    return !Object.values(newErrors).some(error => error !== "");
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
  const validateField = (name, value, isTouched) => {
    if (!isTouched) return "";
    
    switch (name) {
      case 'name':
        return validateName(value);
      case 'phone':
        return validatePhone(value);
      case 'contactMethod':
        return validateContactMethod(value);
      default:
        return "";
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const loadCalculatorDataFromURL = () => {
    try {
      const urlParams = new URLSearchParams(window.location.search);
      console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã URL:', window.location.search);
      console.log('üìã –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', Object.fromEntries(urlParams.entries()));
      
      if (urlParams.has('service') || urlParams.has('meters')) {
        const data = {
          service: urlParams.get('service') || '',
          meters: urlParams.get('meters') || '',
          calculatedPrice: {
            min: parseInt(urlParams.get('priceMin')) || 0,
            max: parseInt(urlParams.get('priceMax')) || 0
          },
          name: urlParams.get('name') || '',
          phone: urlParams.get('phone') || ''
        };
        
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', data);
        
        setCalculatorData(data);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        setFormData(prev => ({
          ...prev,
          name: data.name,
          phone: data.phone
        }));
        
        // –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—è –∫–∞–∫ "—Ç—Ä–æ–Ω—É—Ç—ã–µ" –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        const newTouched = {
          name: !!data.name, // true –µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è
          phone: !!data.phone, // true –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
          contactMethod: false
        };
        setTouched(newTouched);
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const newErrors = {
          name: validateName(data.name),
          phone: validatePhone(data.phone),
          contactMethod: ""
        };
        setErrors(newErrors);
        
        hasLoadedCalculatorData.current = true;
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
        
        return true;
      }
      
      console.log('‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ URL');
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL:', error);
      return false;
    }
  };

  // –ó–∞–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ sessionStorage
  const loadCalculatorDataFromStorage = () => {
    try {
      const savedCalculatorData = sessionStorage.getItem('calculatorData');
      console.log('üîç –î–∞–Ω–Ω—ã–µ –≤ sessionStorage:', savedCalculatorData);
      
      if (savedCalculatorData) {
        const data = JSON.parse(savedCalculatorData);
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∏–∑ sessionStorage:', data);
        
        setCalculatorData(data);
        
        setFormData(prev => ({
          ...prev,
          name: data.name || '',
          phone: data.phone || ''
        }));
        
        const newTouched = {
          name: true,
          phone: true,
          contactMethod: false
        };
        setTouched(newTouched);
        
        const newErrors = {
          name: validateName(data.name || ''),
          phone: validatePhone(data.phone || ''),
          contactMethod: ""
        };
        setErrors(newErrors);
        
        hasLoadedCalculatorData.current = true;
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ sessionStorage');
        
        return true;
      }
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ sessionStorage:', error);
      return false;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
  const loadSavedFormData = () => {
    try {
      const savedFormData = sessionStorage.getItem('contactsFormData');
      if (savedFormData && !hasLoadedCalculatorData.current) {
        const data = JSON.parse(savedFormData);
        setFormData(data);
        
        const newErrors = {
          name: "",
          phone: "", 
          contactMethod: ""
        };
        setErrors(newErrors);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã:', error);
    }
  };

  // –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('üöÄ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Contacts —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω');
    console.log('üìç –¢–µ–∫—É—â–∏–π URL:', window.location.href);
    console.log('üìç –•–µ—à:', window.location.hash);
    console.log('üìç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', window.location.search);
    
    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const urlDataLoaded = loadCalculatorDataFromURL();
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤ URL –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ sessionStorage
    if (!urlDataLoaded) {
      console.log('üîÑ –î–∞–Ω–Ω—ã—Ö –≤ URL –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º sessionStorage');
      loadCalculatorDataFromStorage();
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    loadSavedFormData();

    const handleHashChange = () => {
      console.log('üîÑ –•–µ—à –∏–∑–º–µ–Ω–∏–ª—Å—è:', window.location.hash);
      if (window.location.hash === '#contact') {
        hasLoadedCalculatorData.current = false;
        
        // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ö–µ—à–∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const urlDataLoaded = loadCalculatorDataFromURL();
        if (!urlDataLoaded) {
          loadCalculatorDataFromStorage();
        }
      }
    };

    window.addEventListener('hashchange', handleHashChange);
    
    return () => {
      window.removeEventListener('hashchange', handleHashChange);
    };
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    sessionStorage.setItem('contactsFormData', JSON.stringify(formData));
  }, [formData]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    if (touched[name]) {
      const error = validateField(name, value, true);
      setErrors(prev => ({ ...prev, [name]: error }));
    }
  };

  const handleBlur = (e) => {
    const { name, value } = e.target;
    
    if (!touched[name]) {
      setTouched(prev => ({ ...prev, [name]: true }));
    }
    
    const error = validateField(name, value, true);
    setErrors(prev => ({ ...prev, [name]: error }));
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏
  const getContactMethodText = (method) => {
    switch (method) {
      case 'telegram':
        return 'Telegram';
      case 'whatsapp':
        return 'WhatsApp';
      case 'phone':
        return '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫';
      case 'email':
        return 'Email';
      default:
        return '–ù–µ —É–∫–∞–∑–∞–Ω';
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Google Forms
  const submitToGoogleForms = () => {
    const googleFormUrl = "https://docs.google.com/forms/d/e/1FAIpQLSepPfrOsTsx8e0veqjDfQ7es8DnP8MpSxY9xJxB_VyQk_z60Q/formResponse";
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = googleFormUrl;
    form.style.display = 'none';
    form.target = '_blank';

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è
    const fields = {
      'entry.1803102575': formData.name,
      'entry.1496045372': formData.phone,
      'entry.392138171': getContactMethodText(formData.contactMethod),
      'entry.1639246950': calculatorData ? calculatorData.service : "–ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å",
      'entry.749667160': calculatorData ? `${calculatorData.meters} –º¬≤` : "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
      'entry.1761612622': calculatorData ? `–æ—Ç ${calculatorData.calculatedPrice?.min || 0} –¥–æ ${calculatorData.calculatedPrice?.max || 0} —Ä—É–±.` : "–ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–ª–∞—Å—å"
    };

    Object.entries(fields).forEach(([name, value]) => {
      const input = document.createElement('input');
      input.type = 'hidden';
      input.name = name;
      input.value = value;
      form.appendChild(input);
    });

    document.body.appendChild(form);
    form.submit();
    document.body.removeChild(form);

    return true;
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Email
  const submitViaEmail = () => {
    const subject = "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞";
    const body = `
–ò–º—è: ${formData.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: ${getContactMethodText(formData.contactMethod)}
–£—Å–ª—É–≥–∞: ${calculatorData ? calculatorData.service : "–ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å"}
–ü–ª–æ—â–∞–¥—å: ${calculatorData ? `${calculatorData.meters} –º¬≤` : "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}
–°—Ç–æ–∏–º–æ—Å—Ç—å: ${calculatorData ? `–æ—Ç ${calculatorData.calculatedPrice?.min || 0} –¥–æ ${calculatorData.calculatedPrice?.max || 0} —Ä—É–±.` : "–ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–ª–∞—Å—å"}
    `.trim();

    window.location.href = `mailto:17artem12@gmail.com?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const newTouched = {
      name: true,
      phone: true,
      contactMethod: true
    };
    setTouched(newTouched);

    if (!validateForm()) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ");
      return;
    }

    // –°–ù–ê–ß–ê–õ–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Forms
    const googleSent = submitToGoogleForms();
    
    // –ü–û–¢–û–ú –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email (–¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
    setTimeout(() => {
      submitViaEmail();
    }, 100);

    if (googleSent) {
      alert("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.");
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
      sessionStorage.removeItem('calculatorData');
      sessionStorage.removeItem('contactsFormData');
      hasLoadedCalculatorData.current = false;
      setCalculatorData(null);
      
      setFormData({
        name: "",
        phone: "",
        contactMethod: ""
      });
      
      setTouched({
        name: false,
        phone: false,
        contactMethod: false
      });
      
      setErrors({
        name: "",
        phone: "",
        contactMethod: ""
      });
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
  const isFormValid = () => {
    const allFieldsFilled = formData.name && formData.phone && formData.contactMethod;
    const noErrors = !errors.name && !errors.phone && !errors.contactMethod;
    return allFieldsFilled && noErrors;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –ø–æ–ª—è
  const getFieldClassName = (fieldName) => {
    return touched[fieldName] && errors[fieldName] ? "error" : "";
  };

  return (
    <section className="contacts" id="contact">
      <div className="container">
        <div className="contacts-container">
          <h2 className="contacts-title">–ö–æ–Ω—Ç–∞–∫—Ç—ã</h2>

          <div className="contacts-grid">
            {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
            <div className="contacts-info">
              <div className="contacts-item">
                <h3>–ù–∞—à–∞ –ø–æ—á—Ç–∞</h3>
                <p>jarosllopatin7@yandex.ru</p>
              </div>

              <div className="contacts-item">
                <h3>–¢–µ–ª–µ—Ñ–æ–Ω</h3>
                <p>+7 (982) 716-62-07</p>
              </div>

              <div className="contacts-buttons">
                <a href="https://t.me/+79827166207" className="btn-link telegram">Telegram</a>
                <a href="https://wa.me/79827166207" className="btn-link whatsapp">WhatsApp</a>
              </div>

              <p className="contacts-note">
                –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ —á–µ—Ä–µ–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã.
              </p>
            </div>

            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî —Ñ–æ—Ä–º–∞ */}
            <div className="contacts-form-block">
              <h3>–£ –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?</h3>
              <p>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–∏—Ö.</p>


              {calculatorData && (
                <div className="calculator-info" style={{
                  background: '#f8f9fa',
                  padding: '15px',
                  borderRadius: '8px',
                  marginBottom: '20px',
                  border: '1px solid #e9ecef'
                }}>
                  <h4>–î–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:</h4>
                  <p><strong>–£—Å–ª—É–≥–∞:</strong> {calculatorData.service}</p>
                  <p><strong>–ü–ª–æ—â–∞–¥—å:</strong> {calculatorData.meters} –º¬≤</p>
                  <p><strong>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> –æ—Ç {calculatorData.calculatedPrice?.min || 0} –¥–æ {calculatorData.calculatedPrice?.max || 0} —Ä—É–±.</p>
                </div>
              )}

              <form className="contacts-form" onSubmit={handleSubmit} ref={formRef}>
                <div className="form-row">
                  <div className="form-group">
                    <input 
                      type="text" 
                      name="name"
                      placeholder="–í–∞—à–µ –∏–º—è" 
                      value={formData.name}
                      onChange={handleInputChange}
                      onBlur={handleBlur}
                      className={getFieldClassName('name')}
                    />
                    {touched.name && errors.name && (
                      <span className="error-message">{errors.name}</span>
                    )}
                  </div>
                  
                  <div className="form-group">
                    <input 
                      type="text" 
                      name="phone"
                      placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" 
                      value={formData.phone}
                      onChange={handleInputChange}
                      onBlur={handleBlur}
                      className={getFieldClassName('phone')}
                    />
                    {touched.phone && errors.phone && (
                      <span className="error-message">{errors.phone}</span>
                    )}
                  </div>
                </div>
                
                <div className="form-row">
                  <div className="form-group">
                    <select 
                      name="contactMethod"
                      value={formData.contactMethod}
                      onChange={handleInputChange}
                      onBlur={handleBlur}
                      className={getFieldClassName('contactMethod')}
                    >
                      <option value="">–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</option>
                      <option value="telegram">Telegram</option>
                      <option value="whatsapp">WhatsApp</option>
                      <option value="phone">–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫</option>
                    </select>
                    {touched.contactMethod && errors.contactMethod && (
                      <span className="error-message">{errors.contactMethod}</span>
                    )}
                  </div>
                </div>
                
                <button 
                  type="submit" 
                  className="btn-submit"
                  disabled={!isFormValid()}
                >
                  {calculatorData ? '–ü–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç' : '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'}
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Contacts;